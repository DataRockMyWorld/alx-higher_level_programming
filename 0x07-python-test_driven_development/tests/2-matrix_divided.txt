The "2-matrix_divided" module
==========================

using "matrix_divided" function
-----------------------------


First `` from the 2-matrix_divided module:

>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Now use it to test case:

Add an integer matrix and a divisor > 0
----------------------------------------
>>> matrix_divided([[2, 4, 6], [8, 12, 2]], 2)
[[1.0, 2.0, 3.0], [4.0, 6.0, 1.0]]


Add a Row with a length of 2
-------------------------------
>>> matrix_divided([[2, 4, 6], [8, 12]], 2)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

Add a Function with 3 Argument
-------------------------------
>>> matrix_divided([[2, 4, 6], [8, 12]], 2)
Traceback (most recent call last):
    ...
TypeError: Each row of the matrix must have the same size

Add a tuple as a row in the Matrix
-------------------------------
>>> matrix_divided([[2, 4, 6], (8, 5, 12)], 2)
Traceback (most recent call last):
    ...
TypeError: Matrix must be a matrix(list of lists) of integers/floats

Divide matrix by zero
---------------------
>>> matrix_divided([[1, 2, 4], [3, 4, 5]], 0 )

Invalid Matrices
==============

The parameter ``matrix`` must be a list of lists consisting of either ints or
floats. If ``matrix`` is not a list, a TypeError is raised.

::

    >>> matrix = "not a list"
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

::

    >>> matrix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Note that an empty list will raise the TypeError.

::

    >>> matrix = []
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

But an empty list of lists will succeed.

::

    >>> matrix = [[]]
    >>> print(matrix_divided(matrix, 3))
    [[]]

An identical TypeError is raised if ``matrix`` is not specifically a list of
lists.

::

    >>> matrix = [1, 2, 3]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats

The same TypeError is raised yet again if any elements in ``matrix`` are
neither ints nor floats.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, "not a number", 6]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: matrix must be a matrix (list of lists) of integers/floats


Finally, all the rows in ``matrix`` must be the same size. If any rows are
of different sizes, a new TypeError is raised.

::

    >>> matrix = [
    ...     [1, 2, 3, 4],
    ...     [5, 6, 7]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    TypeError: Each row of the matrix must have the same size

Invalid Divisors
================

The parameter ``div`` must be either an int or float. Otherwise, a TypeError
is raised.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, "not a number"))
    Traceback (most recent call last):
    TypeError: div must be a number

::

    >>> print(matrix_divided(matrix, None))
    Traceback (most recent call last):
    TypeError: div must be a number

``div`` must also be non-zero. Otherwise, a ZeroDivisionError is raised.

::

    >>> print(matrix_divided(matrix, 0))
    Traceback (most recent call last):
    ZeroDivisionError: division by zero